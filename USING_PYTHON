import random
def start_game():
 mat = []
 for i in range(4):
    mat.append([0]*4)
    return mat
def add_new_2(mat):
    r = random.randint(0,3)
    c = random.randint(0,3)
    while(mat[r][c] != 0):
        r = random.randint(0,3)
        c = random.randint(0,3)
    mat[r][c] = 2
    return mat
 
def reverse(mat):
    new_mat = []
    for i in range(4):
      new_mat.append([])
      for j in range(4):
        new_mat[i].append(mat[i][4-j-1])

    return new_mat
    
def transpose(mat):
 new_mat = []
 for i in range(4):
    new_mat.append([])
    for j in range(4):
      new_mat[i].append(mat[j][i])
 return new_mat
def merge(mat):

 for i in range(4):
    for j in range(3):
        if mat[i][j] == mat[i][j+1] and mat[i][j]!=0:
            mat[i][j] = mat[i][j]*2
            mat[i][j+1] = 0
 return mat

def compress(mat):
 new_mat = []
 for i in range(4):
    new_mat.append([0]*4)

 for i in range(4):
    pos = 0
    for j in range(4):
      if mat[i][j] != 0:
        new_mat[i][pos] = mat[i][j]
        pos+=1
 return new_mat
        
        
def move_up(grid):
  transposed_grid = transpose(grid)
  new_grid = compress(transposed_grid)
  new_grid = merge(new_grid)
  new_grid = compress(new_grid)
  final_grid = transpose(new_grid)
  return final_grid
  
def move_down(grid):
 transposed_grid = transpose(grid)
 reversed_grid = reverse(transposed_grid)
 new_grid = compress(reversed_grid)
 new_grid = merge(new_grid)
 new_grid = compress(new_grid)
 final_reversed_grid = reverse(new_grid)
 final_grid = transpose(final_reversed_grid)
 return final_grid
 
 
 
 def move_right(grid):
    reversed_grid = reverse(grid)
    new_grid = compress(reversed_grid)
    new_grid = merge(new_grid)
    new_grid = compress(new_grid)
    final_grid = reverse(new_grid)
 return final_grid
 
def move_left(grid):
    new_grid = compress(grid)
    new_grid = merge(new_grid)
    new_grid = compress(new_grid)
    return new_grid

def get_current_state(mat):
 # Anywhere 2048 is present
    for i in range(4):
        for j in range(4):
            if (mat[i][j] == 2048):
                return "WON"
   
  #anywhere 0 is present
    for i in range(4):
        for j in range(4):
            if(mat[i][j] == 0):
                return "GAME NOT OVER"
        
 # Every Row and Column except last row and last column
    for i in range(3):
        for j in range(3):
            if(mat[i][j] == mat[i+1][j] or mat[i][j] == mat[i][j+1]):
                return "GAME NOT OVER"
        
 #Last Row
    for j in range(3):
        if mat[3][j] == mat[3][j+1]:
            return "GAME NOT OVER"
        
 #Last Column

    for i in range(3):
        if mat[i][3] == mat[i+1][3]:
            return "GAME NOT OVER"
      
    return "LOST"
      
      
mat = start_game()
mat[1][3] = 2
mat[2][2] = 2
mat[3][0] = 4
mat[3][1] = 8
mat[2][1] = 4
inputs = [int(ele) for ele in input().split()]
for ele in inputs:
    if ele == 1:
      mat = move_up(mat)
    elif ele == 2:
      mat = move_down(mat)
    elif ele == 3:
      mat = move_left(mat)
    else:
      mat = move_right(mat)
    print(mat)

=======================================================================================================================================================================
                        UI PART
=======================================================================================================================================================================

from Tkinter import Frame,Label,CENTER   #tkinter library in python2 importing class
import LogicsFinal                       #logic file as logicsfinal
import constants as c                    #constants file where diff constants are given


class Game2048(Frame):                  #class game2048 inherited from frame class, super class is frame
    def __init__(self):
        Frame.__init__(self)                #frame of object game2048 is created
        self.grid()                         #tkinter has a grid manager that allows us to create all visits in form of grid
        self.master.title("2048")           #frame's boundary title is set to 2048
        self.master.bind(<"Key">,self.key_down)   #if any key s pressed i will go to self.key_down func,binding is there to see the UI events
        
        self.commands={c.KEY_UP:LogicsFinal.move_up,      #key up means 'w' ,
                    c.KEY_DOWN:LogicsFinal.move_down,  #key down means 's' ,
                    c.KEY_LEFT:LogicsFinal.move_left,  #key left means 'a' ,
                    c.KEY_RIGHT:LogicsFinal.move_right #key right means 'd'
                    }
        
        self.grid_cells=[]   #grid contains cells initially it is empty
        self.init_grid()     #add the grid cells
        self.init_matrix()   
        self.update_grid_cells()   #change in UI , that what is text color and what is background color acc to numbers
        self.main_loop()           #runs the program
    
    def init_grid(self):
        background=Frame(self,bg=c.BACKGROUND_COLOR_GAME,       #frame is another kind of visit
                            width=c.SIZE,height=c.SIZE)
        background.grid()      #visualize the background as a grid
        for i in range(c.GRID_LEN):
            grid_row=[]
            for j in range(c.GRID_LEN):
                cell=Frame(background,bg=c.BACKGROUND_COLOR_CELL_EMPTY,   #INSIDE frame cell of frame type is made
                           width=c.SIZE/c.GRID_LEN,height=c.SIZE/c.GRID_LEN) 
                cell.grid(row=i,column=j,padx=c.GRID_PADDING,
                          pady=c.GRID_PADDING)
                t=Label(master=cell,text="",            #label is inside each cell
                       bg=c.BACKGROUND_COLOR_CELL_EMPTY,
                       justify=CENTER,font=c.FONT,width=5,height=2)
                t.grid()                              #label is itself is a grid
                grid_row.append(t)
            self.grid_cells.append(grid_row)









